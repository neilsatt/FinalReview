/* https://teamtreehouse.com/library/css-layout-basics */


/* Getting Started --------------------------------------------------------------------------- */
/* 
    CSS Reset with Normalize - helps you start a css project consistently with all browsers
    Wrapper/Container - centers the layout and keeps it from being too wide or too small 

*/
body {
    width: 70%; /* keeps from being too wide */
    margin: 0 auto; /* centers wrapper in browser */ 
}

/* Why vertical margins collapse - 
        when there is no border, padding or content area to interrupt two touching margins
    
    Sometimes you'll see a margin gap at the top of your page
    like a h1 tag inside a header - the margin should be inside
    the top margin of the heading is touching the top margin of the body - the page picks the largest of the two margins
    Ways to get rid of the gap:
    1) set the h1 margin-top to zero
    2) Give the main header, any padding-top value:
        padding: 1em 0;
*/

/* Centering Page Content and Creating a full-width header 

    Make an inner wrapper for content
    Leave outer elements like header and footer at 100%
    100vh -  100% viewport relative - stands for viewport height, based on browser vp
    calc() - used to calculate the width an element
*/

/* Mobile First Layout - using media queries */
@media (min-width: 769px) {
    /* sticky footer */
    .wrap {
        min-height: calc(100vh - 89px); /* viewport relative - stands for viewport height, based on browser vp
    }

    .container{
        width: 70%;
        max-width: 1000px;
        margin: 0 auto;
    }

}

/*  border-box forces the padding and borders into the width and height of the elements, instead of expanding them - containers take up exactly 70% */
* {
   
    box-sizing: border-box; 
}


/* Sticky Footer - a footer forced to the bottom of that page regardless of content above it */




/* Controlling Layout with Display Modes  ------------------------------------------------------*/
/* 
        
        
   Block (h1, paragraphs, lists) -  Naturally expand to fill their parent container div and take
         display:block;             up the entire line. Stack on top of each other. 
        
   Inline (images, links, spans)
        display:inline; // appear on the same line as elements besides them
        
   Inline-Block - you can style inline-block elements like block elements, such as applying
                  width, height, top/bottom margins and padding (flow with surrounding content)
                  
   To remove gaps between inline and inline-block elements:
        - apply small negative right margin
        .main-nav li {
            margin-right: -4px;
        }
        
*/

        
        
 /* Layout Challenge       

Target the two columns inside the main container to display two equal-width columns.
Display both columns horizontally so that they appear side by side on the same line.
*/ 
 .col {
   display: inline-block;
   width: 50%;
   margin-right: -4px; /* remove gap so they appear on the same line */
   vertical-align: top; /* align to top of their containers, helps when resizing */
   padding-left: 1em; /* add a gutter in between columns */
   padding-right: 1em;  
 }   
        
        

/* Page Layout with the Float Property ---------------------------------------------------------*/
/* 
    Floats are taken out of the normal flow - content flows along side of them (left or right)
    
        


*/

/* CSS Layout Project --------------------------------------------------------------------------*/




/* Positioning Page Content ---------------------------------------------------------------------*/