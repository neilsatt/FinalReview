/* https://teamtreehouse.com/library/css-layout-basics */


/* Getting Started --------------------------------------------------------------------------- */
/* 
    CSS Reset with Normalize - helps you start a css project consistently with all browsers
    Wrapper/Container - centers the layout and keeps it from being too wide or too small 

*/
body {
    width: 70%; /* keeps from being too wide */
    margin: 0 auto; /* centers wrapper in browser */ 
}

/* Why vertical margins collapse - 
        when there is no border, padding or content area to interrupt two touching margins
    
    Sometimes you'll see a margin gap at the top of your page
    like a h1 tag inside a header - the margin should be inside
    the top margin of the heading is touching the top margin of the body - the page picks the largest of the two margins
    Ways to get rid of the gap:
    1) set the h1 margin-top to zero
    2) Give the main header, any padding-top value:
        padding: 1em 0;
*/

/* Centering Page Content and Creating a full-width header 

    Make an inner wrapper for content
    Leave outer elements like header and footer at 100%
    100vh -  100% viewport relative - stands for viewport height, based on browser vp
    calc() - used to calculate the width an element
*/

/* Mobile First Layout - using media queries */
@media (min-width: 769px) {
    /* sticky footer */
    .wrap {
        min-height: calc(100vh - 89px); /* viewport relative - stands for viewport height, based on browser vp
    }

    .container{
        width: 70%;
        max-width: 1000px;
        margin: 0 auto;
    }

}

/*  border-box forces the padding and borders into the width and height of the elements, instead of expanding them - containers take up exactly 70% */
* {
   
    box-sizing: border-box; 
}


/* Sticky Footer - a footer forced to the bottom of that page regardless of content above it */




/* Controlling Layout with Display Modes  ------------------------------------------------------*/
/* 
        
        
   Block (h1, paragraphs, lists) -  Naturally expand to fill their parent container div and take
         display:block;             up the entire line. Stack on top of each other. 
        
   Inline (images, links, spans)
        display:inline; // appear on the same line as elements besides them
        
   Inline-Block - you can style inline-block elements like block elements, such as applying
                  width, height, top/bottom margins and padding (flow with surrounding content)
                  
   To remove gaps between inline and inline-block elements:
        - apply small negative right margin
        .main-nav li {
            margin-right: -4px;
        }
        
*/

        
        
 /* Layout Challenge       

Target the two columns inside the main container to display two equal-width columns.
Display both columns horizontally so that they appear side by side on the same line.
*/ 
 .col {
   display: inline-block;
   width: 50%;
   margin-right: -4px; /* remove gap so they appear on the same line */
   vertical-align: top; /* align to top of their containers, helps when resizing */
   padding-left: 1em; /* add a gutter in between columns */
   padding-right: 1em;  
 }   
        
        

/* Page Layout with the Float Property ---------------------------------------------------------*/
/* 
    Floats are taken out of the normal flow - content flows along side of them (left or right)
    Float values - left, right, none 
    Floated elements a block-level elements, but behave like inline because they aren't on 
        their own line
    
    *If a block level element contains a floated element, its height collapses
     To fix, use what is known as a Clearfix:
        - Set the parent element's overflow value to hidden or auto
        - clear the float with a CSS pseudo-element
     A clearfix forces a container to expand and contain the floated elements      
*/        
        overflow: hidden; /* con - hide content */
        overflow: auto; /* con - can add scrollbars */
        
        .clearfix::after { /* use whatever name you want */
            content: ""; /* generates a blank pseudo after the element, from within the CSS*/
            display: table; /* display as block level table */
            clear: both; /* clears any collapsed space on both sides of container */
        }
        
        /* Quiz Review 
         Browsers display elements in the order they appear in the HTML source called:
            normal document flow
         How do elements appear when they are in the normal document flow?
            block/inline stacked on top of each other, or on the same line 
            as contents and element besides them.  
        
         Display the list items inside .footer-nav side by side with a float:
        
            .footer-nav li {
               float: left; 
               display: inline-block; 
            }
        */
        
        /* Simple 2 column layout ideas
            Use inline-block 
            Create a main column class and float right or left, add minor padding
            set primary and secondary columns widths to equal 100% (60+40, etc. )
            
        */
        

        

/* CSS Layout Project --------------------------------------------------------------------------*/
 /* 
   Redesign of website - work with display properties and floats

   Quiz
        The mobile first approach mostly uses what media feature?
            min-width, since you're building from narrow to wider 
        



/* Positioning Page Content ---------------------------------------------------------------------*/
        
 /* 
      Absolute Positioning 
      Absolutely Positioned elements rely on you telling the browser where to place them, using top, right, bottom or left 
      When you use absolute positioning, you place the absolutely positioned elements in relation to a parent container; 
      the parent container is the positioning context. 
      Items are taken out of the normal flow. Other items around it, don't know that it exists. 
      top: 0px;
      left: 0px; // the element would show up in the top left corner
      
      Relative Positioning 
      Works hand in hand with Absolute Positioning
      An element with relative positioning gives you the control to absolutely position 
      elements anywhere inside it.
      
      An element with absolute positioning is always relative to the first parent 
      that has a relative position.
        
      If no parent element has a relative position, the browser viewport is the 
      positioning context by default. 
        
        So basically, if there isn't a parent element set to relative
            - absolute items are positioned based on the viewport
            - otherwise, the items are positioned based on the relative parent element
        
      Offsets - top, right, bottom, left
        When you position elements with offset values, a negative offset value moves the element in the opposite direction.
        Instead of moving the positioned element away from the top, right, bottom or left edges of its relative container, 
        a negative value it moves it towards the top, right, bottom or left edges.
        
     Fixed -  an element with fixed positioning stays fixed to one spot on the page
              fixed positioning is always relative to the browser's viewport
        
     The z-index property is directly related to stacking order and it's what prevents elements 
     from overlapping other elements.

     z-index works only on elements with a position property set to absolute, fixed, or relative
        
    
    Quiz:
        The offset top: 50px; will place an absolutely positioned element: 
            50px away from the top edge of a container 
        
        An element with absolute positioning is always relative to:
            The first parent that has a relative position
        
        Fixed positioning is a form of relative positioning that places elements 
        in relation to their parent container.
            False 
        
*/
        
/* background image properties */
  background-image: url("img/bear.jpg");
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover; /* Scales the image as large as possible and maintains image aspect ratio. The image "covers" the entire width or height of the container*/
  box-sizing: border-box; /* forces any padding and border widths into its total width and height */
        
/* CSS image gallery */     
        img {
            max-width: 100%; /* allow all images to fill their parent element */
        }
        /* remove bullet points, margin and padding*/
        #gallery { 
         margin: 0;
         padding: 0;
         list-style-type: none; 
        }
        
        
/* Attribute Selectors */    
/* Create an attribute selector that targets img elements with a title attribute value of "avatar". */
        img[title='avatar'] {
            
        }     
        input[type="text"]{
            
        }
        
        
        
        
        
        
        
        